<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://github.com/enderTree/gitblog</id><title>RSS feed of enderTree's gitblog</title><updated>2025-06-24T08:16:59.857195+00:00</updated><link href="https://github.com/enderTree/gitblog"/><link href="https://raw.githubusercontent.com/enderTree/gitblog/master/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><entry><id>https://github.com/enderTree/gitblog/issues/3</id><title>全局排序优化</title><updated>2025-06-24T08:17:00.143688+00:00</updated><content type="html"><![CDATA[<pre><code class="language-sql">
CREATE TABLE talkie_dialogue.tmp_nana_data_1028_555 AS 
WITH hash_bucket AS (
    SELECT  
        *,
        ROW_NUMBER() OVER (PARTITION BY bucket_no ORDER BY user_msg_log_ucnt_30d ASC ) AS bucket_rel_index,
        COUNT(1) OVER (PARTITION BY bucket_no ) AS bucket_size
    FROM    
    (
        SELECT  
            *,
            ABS(HASH(cid)) % 100000 AS bucket_no 
        FROM    
            talkie_dialogue.tmp_nana_data_1028_4            
    ) 
),
bucket_base AS 
(
    SELECT
        bucket_no
        SUM(bucket_size) OVER (ORDER BY bucket_no ASC) - bucket_size AS bucket_base
    FROM
    (
        SELECT 
            bucket_no,
            bucket_size
        FROM
            hash_bucket
    )
)
SELECT
    /*+ MAPJOIN(t2) */ t1.*,
    t2.bucket_base + bucket_rel_index AS id_index
FROM
    hash_bucket t1 
JOIN 
    bucket_base t2 
    ON t1.bucket_no = t2.bucket_no
    AND t1.mid_rank = t2.mid_rank
    AND t1.country_rank = t2.country_rank
    AND t1.setting_type = t2.setting_type
;
</code></pre>
<p>核心代码如上，主要思路先做分桶进行分布式局部排序、再基于桶大小得到全局索引</p>
<ol>
<li>第一步先对id做hash分桶，然后计算每个桶的大小，桶数量可以根据需要计算的id数量来评估，这里分100000个桶，然后计算出每个id在桶内的相对位置bucket_rel_index，同时计算出桶大小bucket_size；</li>
<li>第二步根据桶大小计算每个桶的基址；</li>
<li>第三步将桶基址+id在桶内的相对地址得到全局唯一的绝对地址id_index；</li>
</ol>
]]></content><link href="https://github.com/enderTree/gitblog/issues/3"/><category term="sql"/><published>2025-06-24T08:16:42+00:00</published></entry><entry><id>https://github.com/enderTree/gitblog/issues/2</id><title>测试一下</title><updated>2025-06-24T08:17:00.254334+00:00</updated><content type="html"><![CDATA[<p>111</p>
]]></content><link href="https://github.com/enderTree/gitblog/issues/2"/><category term="baodan"/><published>2025-06-24T08:14:47+00:00</published></entry></feed>